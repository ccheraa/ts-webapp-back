{"version":3,"file":"db.js","sourceRoot":"","sources":["../../src/db/db.ts"],"names":[],"mappings":";;;;AAAA,uCAAkC;AAIlC,qCAA2D;AAC3D,wCAAwC;AACxC,6BAA2C;AAC3C,uCAAuC;AACvC,qCAAqC;AACrC;IAAA;IA6BA,CAAC;IA1BC,8HAA8H;IACvH,UAAO,GAAd,UAAe,GAAW;QACxB,kBAAO,CAAC,GAAG,EAAE,UAAU,GAAG;YACxB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAU,CAAC,CAAC;YAEjC,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC;IACvB,CAAC;IACD,0GAA0G;IAC1G,gCAAgC;IAChC,IAAI;IACJ,0GAA0G;IAC1G,iEAAiE;IACjE,IAAI;IACG,OAAI,GAAX;QACE,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACxC,oCAAoC;YACpC,2CAA2C;YAC3C,MAAM;QACR,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IACH,SAAC;AAAD,CAAC,AA7BD;AAES,aAAU,GAAwB,IAAI,cAAO,EAAE,CAAC;AAF5C,gBAAE;AA8Bf,2IAA2I;AAC3I,2DAA2D;AAC3D,KAAK","sourcesContent":["export * from '@ts-webapp/common';\r\nimport * as express from 'express';\r\n// import { Server, Route } from '../server';\r\nimport { Model } from './model';\r\nimport { Connection, connect, connection } from 'mongoose';\r\n// import * as mongoose from 'mongoose';\r\nimport { Observable, Subject } from 'rxjs';\r\n// export const mongo = new Mongoose();\r\n// mongoose.Promise = global.Promise;\r\nexport class DB {\r\n  static observer: any;\r\n  static connection: Subject<Connection> = new Subject();\r\n  // static accessController: Subject<[Model, express.Request, express.Response, string, express.NextFunction]> = new Subject();\r\n  static connect(url: string): Subject<Connection> {\r\n    connect(url, function (err) {\r\n      if (err) {\r\n        DB.connection.error(err);\r\n      } else {\r\n        DB.connection.next(connection);\r\n        // observer.complete();\r\n      }\r\n    });\r\n    return DB.connection;\r\n  }\r\n  // static access(): Observable<[Model, express.Request, express.Response, string, express.NextFunction]> {\r\n  //   return DB.accessController;\r\n  // }\r\n  // static canAccess(model: Model, req: express.Request, res: express.Response, id: string, cb: Function) {\r\n  //   DB.accessController.next([model, req, res, id, () => cb()]);\r\n  // }\r\n  static test() {\r\n    let promise = new Promise((resolve, reject) => {\r\n      // Standup.find((err, standups) => {\r\n      //   err ? reject(err) : resolve(standups);\r\n      // });\r\n    });\r\n    return promise;\r\n  }\r\n}\r\n// export const dbReady = function(next?: (value: Connection) => void, error?: (error: any) => void, complete?: () => void): Subscription {\r\n//   return DB.connection.subscribe(next, error, complete);\r\n// };"]}