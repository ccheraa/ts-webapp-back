{"version":3,"file":"route.js","sourceRoot":"","sources":["../../src/db/route.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\r\nimport { DB } from './db';\r\nimport { ResponseType } from '@ts-webapp/common';\r\nimport { Model } from './model';\r\nimport { extend } from '../utils';\r\nimport { Controller, Route } from '../server';\r\nimport { Response } from 'express';\r\n\r\nexport function sendResponse(res: Response, data: any) {\r\n  res.json({ ok: true, data});\r\n}\r\nexport function sendErrorResponse(res: Response, errors?: any[]) {\r\n  res.json({ ok: false, errors});\r\n}\r\n\r\nexport function ModelRoutes<T>(model: Model<T>, url: string = '/', access?: express.RequestHandler, format?: express.RequestHandler): Route[] {\r\n  let find: Route = new Route(url + '/find')\r\n    .on('post', access, (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n      model.find(req.body.conditions, req.body.projection, req.body.options).subscribe(\r\n        documents => sendResponse(res, documents),\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    });\r\n  let count: Route = new Route(url + '/count')\r\n    .on(['post', 'get'], access, (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n      model.count(req.body.conditions).subscribe(\r\n        count => sendResponse(res, count),\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    });\r\n  let multi: Route = new Route(url)\r\n    .on('post', (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n      let docs: any[] = [];\r\n      model.create(req.body.document).subscribe(\r\n        doc => {\r\n          if (typeof (req.body.document as Object[]).forEach === 'function') {\r\n            docs.push(doc);\r\n          } else {\r\n            sendResponse(res, doc);\r\n          }\r\n        },\r\n        err => sendErrorResponse(res, err),\r\n        () => (typeof (req.body.document as Object[]).forEach === 'function') && sendResponse(res, docs)\r\n      );\r\n    })\r\n    .on('get', access, (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n      model.list(req.query.doc).subscribe(\r\n        documents => model.count(req.query.conditions).subscribe(count => {\r\n          if (format) {\r\n            req.body.data = documents;\r\n            format(req, res, () => sendResponse(res, req.body.data));\r\n          } else {\r\n            sendResponse(res, documents);\r\n          }\r\n        }),\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    })\r\n    .on('put', (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n    // TODO: options not used\r\n      model.update(req.body.conditions, req.body.document).subscribe(\r\n        result => sendResponse(res, result),\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    })\r\n    .on('delete', (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n      model.remove(req.body.conditions).subscribe(\r\n        result => sendResponse(res, result),\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    });\r\n  let single: Route = new Route(url + '/:id([0-9a-f]+)')\r\n    .on('get', (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n    // TODO: req.query.projection and req.query.options not used\r\n      model.get(req.params.id, req.query.projection, req.query.options).subscribe(\r\n        document => {\r\n          if (format) {\r\n            req.body.data = document;\r\n            format(req, res, () => sendResponse(res, req.body.data));\r\n          } else {\r\n            sendResponse(res, document);\r\n          }\r\n        },\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    })\r\n    .on(['put', 'post'], (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n      let obs = model.set(req.params.id, req.body.document);\r\n      obs.subscribe(\r\n        result => sendResponse(res, result),\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    })\r\n    .on('delete', (req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n      model.remove(req.params.id).subscribe(\r\n        result => sendResponse(res, result),\r\n        err => sendErrorResponse(res, err)\r\n      );\r\n    });\r\n  return [single, multi, find, count];\r\n};\r\nexport function ModelController<T>(model: Model<T>, baseurl: string = '/', url: string = '/', access?: express.RequestHandler, format?: express.RequestHandler): Controller {\r\n  return new Controller(baseurl, ModelRoutes(model, url, access, format));\r\n};"]}