{"version":3,"file":"model.js","sourceRoot":"","sources":["../../src/db/model.ts"],"names":[],"mappings":"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","sourcesContent":["import { Schema, Model as mgModel, model, Document, SchemaOptions } from 'mongoose';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { Multi } from '@ts-webapp/common';\r\n\r\nexport class Model<T> {\r\n  schema: Schema;\r\n  model: mgModel<any>;\r\n  constructor(public name: string, public definition?: any, options?: SchemaOptions) {\r\n    this.makeSchema(definition);\r\n    this.makeModel(name);\r\n  }\r\n  private static callback<T>(result: Subject<T>, getResult?: (...args) => any) {\r\n    // console.info('preparing callback...');\r\n    return (err, ...args) => {\r\n      // console.log('getting result...');\r\n      // console.log(args);\r\n      if (err) {\r\n        result.error(err);\r\n      } else {\r\n        let ret = getResult ? getResult.apply(null, args) : args[0];\r\n        result.next(ret);\r\n        result.complete();\r\n      }\r\n      // console.info('callback prepared.');\r\n    };\r\n  }\r\n  makeModel(name) {\r\n    this.model = model(name, this.schema);\r\n  }\r\n  makeSchema(definition) {\r\n    this.schema = new Schema(definition);\r\n  }\r\n  // C\r\n  create(document: T): Subject<T>;\r\n  create(documents: T[]): Subject<T[]>;\r\n  create(document: T | T[]): Subject<T | T[]> {\r\n    let result: Subject<any> = new Subject();\r\n    if (typeof (document as T[]).forEach === 'function') {\r\n      let documents = document as T[];\r\n      let current = 0;\r\n      documents.forEach(doc => this.create(doc).subscribe(\r\n        (res: any) => result.next(res) || (++current === documents.length) && result.complete()),\r\n        (err: any) => result.error(err)\r\n      );\r\n    } else {\r\n      let model = new this.model(document);\r\n      model.save(Model.callback<T>(result));\r\n    }\r\n    return result;\r\n  }\r\n  // R\r\n  list(conditions?: T, projection?: any, config?: any): Subject<T[]> {\r\n    let result: Subject<T[]> = new Subject();\r\n    // while (args.length < 3 ) args.push(undefined);\r\n    // console.log('listing...');\r\n    this.model.find.apply(this.model, [conditions, projection, config, Model.callback<T[]>(result)]);\r\n    return result;\r\n  }\r\n  find(conditions?: T, projection?: any, config?: any): Subject<Multi<T>> {\r\n    let result: Subject<Multi<T>> = new Subject();\r\n    this.list(conditions, projection, config).subscribe(\r\n      documents => this.count(conditions).subscribe(count => {\r\n        result.next({ rows: documents, total: count });\r\n        result.complete();\r\n      })\r\n    );\r\n    return result;\r\n  }\r\n  count(conditions?: T): Subject<number> {\r\n    let result: Subject<number> = new Subject();\r\n    this.model.count(conditions, Model.callback<number>(result, count => count));\r\n    return result;\r\n  }\r\n  get(id: string, projection?: any, options?: any): Subject<T> {\r\n    let result: Subject<T> = new Subject();\r\n    this.model.findById.apply(this.model, [id, projection, options, Model.callback<T>(result)]);\r\n    return result;\r\n  }\r\n  // U\r\n  set(id: string, document: T, options?: any): Subject<any> {\r\n    let result: Subject<any> = new Subject();\r\n    this.model.update.apply(this.model, [{_id: id}, document, options, Model.callback<any>(result,\r\n      response => ({ found: response.n, set: response.nModified })\r\n    )]);\r\n    return result;\r\n  }\r\n  update(conditions?: T, document?: T, options?: any): Subject<any> {\r\n    let result: Subject<any> = new Subject();\r\n    if (typeof options === 'object') {\r\n      options.multi = true;\r\n    } else {\r\n      options = {multi: true};\r\n    }\r\n    this.model.update(conditions, document, options, Model.callback<any>(result,\r\n      response => ({ found: response.n, set: response.nModified })\r\n    ));\r\n    return result;\r\n  }\r\n  // D\r\n  remove(): Subject<number>;\r\n  remove(id?: string | T): Subject<number>;\r\n  remove(conditions?: T): Subject<number>;\r\n  remove(conditions?: string | T): Subject<number> {\r\n    let result: Subject<number> = new Subject();\r\n    this.model.remove((typeof conditions === 'string') ? {_id: conditions} : conditions, Model.callback<any>(result, response => response.result.n));\r\n    return result;\r\n  }\r\n}\r\n"]}