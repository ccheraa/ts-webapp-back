{"version":3,"file":"tools.spec.js","sourceRoot":"","sources":["../../src/server/tools.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { suite, test/*, slow, timeout, skip, only*/ } from 'mocha-typescript';\r\nimport chai = require('chai');\r\nlet expect = chai.expect;\r\nimport { isPortFree } from './tools';\r\nconst usedPort = 445;\r\nconst usedHost = '0.0.0.0';\r\nconst freePort = 9000;\r\nconst freeHost = '127.0.0.1';\r\n@suite('Tools test') class ToolsSpec {\r\n  @test 'should return an object'() {\r\n    let obj = isPortFree(8000);\r\n    expect(obj).to.not.be.undefined;\r\n    expect(obj.then).to.not.be.undefined;\r\n    expect(obj.not).to.not.be.undefined;\r\n    expect(obj.notFree).to.not.be.undefined;\r\n    expect(obj.free).to.not.be.undefined;\r\n    expect(obj.callback).to.not.be.undefined;\r\n    expect(obj._onFree).to.not.be.undefined;\r\n    expect(obj._onNotFree).to.not.be.undefined;\r\n    expect(obj._callback).to.not.be.undefined;\r\n  };\r\n  @test 'port should not be free (using callback)' (done: Function) {\r\n    let obj = isPortFree(usedPort, usedHost);\r\n    obj.callback((free) => {\r\n      expect(free).to.be.false;\r\n      done();\r\n    });\r\n    expect(obj._callback).to.not.be.null;\r\n  };\r\n  @test 'port should     be free (using callback)' (done: Function) {\r\n    let obj = isPortFree(freePort, freeHost);\r\n    obj.callback((free) => {\r\n      expect(free).to.be.true;\r\n      done();\r\n    });\r\n    expect(obj._callback).to.not.be.null;\r\n  };\r\n  @test 'port should not be free (using then)' (done: Function) {\r\n    let obj = isPortFree(usedPort, usedHost);\r\n    obj.then(null, () => {\r\n      expect(true).to.be.true;\r\n      done();\r\n    });\r\n    expect(obj._onNotFree).to.not.be.null;\r\n  };\r\n  @test 'port should     be free (using then)' (done: Function) {\r\n    let obj = isPortFree(freePort, freeHost);\r\n    obj.then(() => {\r\n      expect(true).to.be.true;\r\n      done();\r\n    });\r\n    expect(obj._onFree).to.not.be.null;\r\n  };\r\n  @test 'port should not be free (using not)' (done: Function) {\r\n    let obj = isPortFree(usedPort, usedHost);\r\n    obj.not(() => {\r\n      expect(true).to.be.true;\r\n      done();\r\n    });\r\n    expect(obj._onNotFree).to.not.be.null;\r\n  };\r\n  @test 'port should not be free (using notFree)' (done: Function) {\r\n    let obj = isPortFree(usedPort, usedHost);\r\n    obj.notFree(() => {\r\n      expect(true).to.be.true;\r\n      done();\r\n    });\r\n    expect(obj._onNotFree).to.not.be.null;\r\n  };\r\n  @test 'port should     be free (using free)' (done: Function) {\r\n    let obj = isPortFree(freePort, freeHost);\r\n    obj.free(() => {\r\n      expect(true).to.be.true;\r\n      done();\r\n    });\r\n    expect(obj._onFree).to.not.be.null;\r\n  };\r\n};"]}