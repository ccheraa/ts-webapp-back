{"version":3,"file":"server.spec.js","sourceRoot":"","sources":["../../src/server/server.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { suite, test, skip/*, slow, timeout, only*/ } from 'mocha-typescript';\r\nimport chai = require('chai');\r\nlet expect = chai.expect;\r\ndeclare var describe;\r\nimport { Controller, Server, serverDefaultConfig } from '.';\r\nimport { isPortFree } from './tools';\r\ndescribe('Server test', () => {\r\n  @suite('Creation test') class ServerSpec {\r\n    @test 'should have a default Server'() {\r\n      let app = new Server();\r\n      expect(app.app).to.not.be.an('undefined');\r\n      expect(app.config.port).to.equal(8001);\r\n    };\r\n    @test 'should have an Server with config'() {\r\n      let config = {\r\n        port: 9999\r\n      };\r\n      let app = new Server(config);\r\n      expect(app.config).to.not.be.an('undefined');\r\n      expect(app.config.port).to.equal(config.port);\r\n      expect(app.config.host).to.equal(serverDefaultConfig.host);\r\n    };\r\n    @test 'should bootstrap a default Server'() {\r\n      let app = Server.bootstrap();\r\n      expect(app.app).to.not.be.an('undefined');\r\n      expect(app.config).to.equal(serverDefaultConfig);\r\n    };\r\n    @test 'should bootstrap an Server with config'() {\r\n      let config = {\r\n        host: '127.0.0.1'\r\n      };\r\n      let app = Server.bootstrap(config);\r\n      expect(app.config).to.not.be.an('undefined');\r\n      expect(app.config.port).to.equal(serverDefaultConfig.port);\r\n      expect(app.config.host).to.equal(config.host);\r\n    };\r\n  };\r\n  @suite('Routing test') class ServerRoutingSpec {\r\n    app: Server;\r\n    handler = (req, res, next) => 'ok';\r\n    before() {\r\n      this.app = new Server();\r\n    };\r\n    @test 'should have static routes to default directories'() {\r\n      const directories = ['dir1', 'dir2', 'dir3'];\r\n      directories.forEach(route => this.app.static(route));\r\n      this.app.app._router.stack\r\n        .filter(layer => layer.name === 'serveStatic')\r\n        .map((layer, index) => {\r\n          expect('/' + directories[index]).to.match(layer.regexp);\r\n        });\r\n    };\r\n    @test 'should have static routes to preset directories'() {\r\n      const directories = ['dir1', 'dir2', 'dir3'];\r\n      const urls = ['test1', 'test2', 'test3'];\r\n      urls.forEach((url, index) => this.app.static(directories[index], url));\r\n      this.app.app._router.stack\r\n        .filter(layer => layer.name === 'serveStatic')\r\n        .forEach((layer, index) => {\r\n          expect(urls[index]).to.match(layer.regexp);\r\n        });\r\n    };\r\n    @skip @test 'should have default route'() {\r\n      this.app.default(this.handler);\r\n      this.app.app._router.stack\r\n        .filter(layer => (layer.name !== 'query') && (layer.name !== 'expressInit'))\r\n        .forEach((layer, index) => {\r\n          expect('/').to.match(layer.regexp);\r\n          expect('/level1').to.match(layer.regexp);\r\n          expect('/level1/level2').to.match(layer.regexp);\r\n          expect('/level1/level2/level3').to.match(layer.regexp);\r\n          expect(layer.handle()).to.equal('ok');\r\n        });\r\n    };\r\n    @test 'should have custom route'() {\r\n      this.app.route('/test/2', this.handler);\r\n      this.app.app._router.stack\r\n        .filter(layer => (layer.name !== 'query') && (layer.name !== 'expressInit'))\r\n        .forEach((layer, index) => {\r\n          expect('/test/1').to.not.match(layer.regexp);\r\n          expect('/test/2').to.match(layer.regexp);\r\n        });\r\n    };\r\n    @test 'should have custom middleware'() {\r\n      this.app.middleware(this.handler);\r\n      this.app.app._router.stack\r\n        .filter(layer => (layer.name !== 'query') && (layer.name !== 'expressInit'))\r\n        .forEach((layer, index) => {\r\n          expect(layer.handle).to.equal(this.handler);\r\n        });\r\n    };\r\n    @test 'should give a routing report'() {\r\n      let controller = new Controller();\r\n      controller.add(this.handler, '/upload', 'post');\r\n      const directories = ['dir1', 'dir2', 'dir3'];\r\n      directories.forEach(route => this.app.static(route));\r\n      this.app.middleware(this.handler);\r\n      this.app.route('/test/2', this.handler);\r\n      this.app.applyRoutes([controller]);\r\n      let report = this.app.routeReport();\r\n      expect(report.static).to.have.length(directories.length);\r\n      expect(report.route).to.have.length(1);\r\n      expect(report.controllers).to.have.length(1);\r\n    };\r\n  };\r\n  @suite('Config test') class ServerConfigSpec {\r\n    app: Server;\r\n    after() {\r\n      this.app && this.app.stop();\r\n    }\r\n    static after() {\r\n      Server.stop();\r\n    }\r\n    @test 'should listen on default port'(done: Function) {\r\n      this.app = new Server({\r\n        port: 8001,\r\n        host: '0.0.0.0'\r\n      });\r\n      this.app.start(() => {\r\n        isPortFree(8001, '0.0.0.0').callback(free => {\r\n          expect(free).to.be.false;\r\n          done();\r\n        });\r\n      });\r\n    };\r\n    // TODO: servers using last config (8005)\r\n    @skip @test 'should stop all running servers'(done) {\r\n      let servers: Server[] = [\r\n        new Server({port: 8001, host: '0.0.0.0'}),\r\n        new Server({port: 8002, host: '0.0.0.0'}),\r\n        new Server({port: 8003, host: '0.0.0.0'}),\r\n        new Server({port: 8004, host: '0.0.0.0'}),\r\n        new Server({port: 8005, host: '0.0.0.0'}),\r\n      ];\r\n      let startedServers: number = 0;\r\n      let assertions: number = 0;\r\n      let serverStarted = function(server: Server) {\r\n        startedServers++;\r\n        if (startedServers === servers.length) {\r\n          Server.stop(() => {\r\n            servers.forEach(server => {\r\n              isPortFree(server.config.port, server.config.host).free(() => {\r\n                assertions++;\r\n                serverStopped(server);\r\n              });\r\n            });\r\n          });\r\n        }\r\n      };\r\n      let serverStopped = function(server: Server) {\r\n        startedServers--;\r\n        if (startedServers === 0) {\r\n          expect(assertions).to.equal(servers.length * 2);\r\n          done();\r\n        }\r\n      };\r\n      servers.forEach(server => server.start(() => {\r\n        isPortFree(server.config.port, server.config.host).not(() => {\r\n          assertions++;\r\n          serverStarted(server);\r\n        });\r\n      }));\r\n    };\r\n  };\r\n});"]}