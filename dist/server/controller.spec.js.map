{"version":3,"file":"controller.spec.js","sourceRoot":"","sources":["../../src/server/controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { suite, test/*, slow, timeout, skip, only*/ } from 'mocha-typescript';\r\nimport chai = require('chai');\r\nlet expect = chai.expect;\r\nimport { Controller, Route, Server } from '.';\r\n@suite('Controller test') class ControllerSpec {\r\n  handler = (req, res, next) => 'ok';\r\n  obj: Controller;\r\n  before() {\r\n    this.obj = new Controller();\r\n  }\r\n  after() {\r\n    delete(this.obj);\r\n    // this.obj = null;\r\n  }\r\n  @test 'should have a router for default Controller'() {\r\n    expect(this.obj.router).to.be.ok;\r\n  };\r\n  @test 'should have a router at: \\'/\\''() {\r\n    this.obj = new Controller('/root');\r\n    expect(this.obj.base).to.equals('/root');\r\n  };\r\n  @test 'should create a Controller with a route GET: \\'/routes/home\\''() {\r\n    let route = new Route('/home');\r\n    route.on('get', this.handler);\r\n    this.obj = new Controller('/routes', [route]);\r\n    expect(this.obj.base).to.equals('/routes');\r\n    expect(this.obj.routes[0].url).to.equals('/home');\r\n    expect(this.obj.routes[0].handles['get']).to.equals(this.handler);\r\n    expect(this.obj.routes[0].handles['get']()).to.equals('ok');\r\n  };\r\n  @test 'should have a route GET: \\'/\\''() {\r\n    this.obj.add(this.handler);\r\n    expect(this.obj.routes[0].url).to.equals('/');\r\n    expect(this.obj.routes[0].handles['get']).to.equals(this.handler);\r\n    expect(this.obj.routes[0].handles['get']()).to.equals('ok');\r\n  };\r\n  @test 'should have a route POST: \\'/upload\\''() {\r\n    this.obj.add(this.handler, '/upload', 'post');\r\n    expect(this.obj.routes[0].url).to.equals('/upload');\r\n    expect(this.obj.routes[0].handles['post']).to.equals(this.handler);\r\n    expect(this.obj.routes[0].handles['post']()).to.equals('ok');\r\n  };\r\n  @test 'should setup a server with one controller'(done) {\r\n    this.obj.add(this.handler, '/upload', 'post');\r\n    let server: Server = new Server();\r\n    server.applyRoutes([this.obj]);\r\n    server.start(() => {\r\n      server.stop();\r\n      expect(this.obj.router.stack).length(1);\r\n      done();\r\n    });\r\n  };\r\n};"]}