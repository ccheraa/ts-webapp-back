{"version":3,"file":"route.spec.js","sourceRoot":"","sources":["../../src/server/route.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// import 'source-map-support/register';\r\nimport { suite, test/*, slow, timeout, skip, only*/ } from 'mocha-typescript';\r\nimport chai = require('chai');\r\nlet expect = chai.expect;\r\nimport { Route } from '.';\r\n@suite('Route test') class RouteSpec {\r\n  handler = (req, res, next) => 'ok';\r\n  @test 'should create a default Route at \\'/\\''() {\r\n    expect(new Route().url).to.equals('/');\r\n  };\r\n  @test 'should create a Route at \\'/\\' (alias)'() {\r\n    expect(new Route('/').url).to.equals('/');\r\n  };\r\n  @test 'should create a Route at: \\'/api\\''() {\r\n    expect(new Route('/api').url).to.equals('/api');\r\n  };\r\n  @test 'should create a route GET/POST: \\'/user\\''() {\r\n    let route = Route.create(this.handler, '/user', ['get', 'post']);\r\n    expect(route.url).to.equals('/user');\r\n    expect(route.handles['get']).to.equals(this.handler);\r\n    expect(route.handles['get']()).to.equals('ok');\r\n    expect(route.handles['post']).to.equals(this.handler);\r\n    expect(route.handles['post']()).to.equals('ok');\r\n  };\r\n  @test 'should create a default route GET: \\'/\\''() {\r\n    let route = Route.create(this.handler);\r\n    expect(route.url).to.equals('/');\r\n    expect(route.handles['get']).to.equals(this.handler);\r\n    expect(route.handles['get']()).to.equals('ok');\r\n  };\r\n  @test 'should create a route POST: \\'/user\\' and link GET to it'() {\r\n    let route = Route.create(this.handler, '/user', 'post');\r\n    expect(route.url).to.equals('/user');\r\n    expect(route.handles['post']).to.equals(this.handler);\r\n    expect(route.handles['post']()).to.equals('ok');\r\n    route.on('get', 'post');\r\n    expect(route.handles['get']).to.equals(this.handler);\r\n    expect(route.handles['get']()).to.equals('ok');\r\n  };\r\n  @test 'should loop through a route\\'s handles'() {\r\n    let route = Route.create(this.handler, '/user', ['get', 'post']);\r\n    let count = 0;\r\n    route.handles.forEach((handle) => {\r\n      expect(handle()).to.equals('ok');\r\n      count++;\r\n    });\r\n    expect(count).to.equals(2);\r\n  };\r\n  // @test 'should have a route GET: \\'/\\''() {\r\n  //\r\n  //   this.obj.add('/', handler);\r\n  //   expect(this.obj.routes[0].url).to.equals('/');\r\n  //   expect(this.obj.routes[0].handles['get']).to.equals(handler);\r\n  //   expect(this.obj.routes[0].handles['get']()).to.equals('ok');\r\n  // };\r\n  // @test 'should have a route POST: \\'/upload\\''() {\r\n  //\r\n  //   this.obj.add('/upload', handler, 'post');\r\n  //   expect(this.obj.routes[0].url).to.equals('/upload');\r\n  //   expect(this.obj.routes[0].handles['post']).to.equals(handler);\r\n  //   expect(this.obj.routes[0].handles['post']()).to.equals('ok');\r\n  // };\r\n};"]}